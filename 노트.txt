- 오늘 학습한 내용에 대하여 요약, 정리하고
다양하게 활용해 보도록 합니다.

- 궁금한점 있으면 개인적으로 질문합니다.



<< 관계있는 객체의 네이밍 룰 >>
고객명을 입력받아 
해당 고객의 주문내역을 
검색하도록 기능을 추가 해 봅니다.

findByCustomer_Name(String name)

-----------------------------------------------------------------

public interface BookDAO extends 
JpaRepository<BookVO, Integer> {
}

<< JPA가 기본적으로 제공하는 메소드 >>
findAll		select * from ~~
save		insert into ~~~, update ~~~
delete 		delete ~~~ where id=?
count		select count(*) from ~~~
getOne		select * from ~~ where id=?

<< 이것 말고도 다양한 sql이 필요해요 >>
애플리케이션을 개발하려면 데이터를 조회하는 기능은 필수 입니다.
"쿼리 메소드"는 스프링 데이터 JPA에서 제공하는 핵심 기능 중의 하나로 
Repository 인터페이스에 간단히 "네이밍 룰"을 이용하여 
메소드를 작성하면 원하는 쿼리를 실행할 수 있어요!

book

bookid			pk
bookname
price
publisher


<< 네이밍 룰 >>
pdf 89쪽

find + (엔티티이름) + By + 변수이름

select * from book where bookname = '재미있는 자바';
	findByBookname(String bookname);

select * from book where publisher = '쌍용미디어';
	findByPublisher(String publisher);

select * from book where price = 3000;
	findByPrice(int price);
	

select * from book 
	where publisher = '쌍용미디어' and price = 3000;
	findByPublisherAndPrice(String publisher, int price);
	
select * from book
	where publisher = '쌍용미디어' or price =3000;	
	findByPublisherOrPrice(String publisher, int price)
	
select * from book
	where price >= 10000 and price <= 20000;
	findByPriceBetween(int start, int end);	
	
select * from book
	where price >=10000;
	findByPriceGreaterThanEqual(int price);
	
select * from book
	where bookname like '%축구%';
	findByBookNameLike(String bookname);
		
select * from book
	where bookname like '축구%';		
	findByBooknameStartingWith(String bookname);
---------------------------------------------------------
select * from book
	where price=10000 
	order by bookname;
	
	findByPriceOrderByBookname(int price)
---------------------------------------------------------	
	select * from book
	where bookname like '%축구%'
	order by price desc;
	findByBooknameLikeOrderByPriceDesc(String bookname);
	
---------------------------------------------------------
	select * from book
	order by bookid;
	findAllByOrderByBookid();
		
	
	
	
	
	
	
	
	






<<  어노테이션의 종류  >>

@Controller
@RestController
@RequestMapping
@GetMapping
@PostMapping
@Repository

@Service
사용자의 요청에 따른 컨트롤러의 메소드가 
직접 DAO를 요청해도 되지만
데이터베이스 연결 작업 뿐 아니라 
다른 일처리도 할 수 있기 때문에 
중간에 Service객체를 두어 
서비스 객체에게 일처리를 맡깁니다.
어찌 되었던 스프링에서는 객체가 자동으로 생성 되어야 하잖아요.
서비스 클래스 앞에 이게 서비스객체입니다 라고 표시해야 합니다.
@Service 이것을 붙여야 자동을 스캔(인식)되고 객체가 생성이 됩니다.


@Component
우리가 어떠한 일처리를 위한 
임의의 클래스의 메소드가 필요한데 그게 
컨트롤러도 아니고, Dao, 서비스도 아니라고 할 때 
어찌 되었던 이 클래스의 객체를 생성해야 자동으로 인식하고 생성됩니다.
이러한 클래스에 @Component를 붙입니다.

@Configuration
스프링 초기에서는 xml기반의 환경설정 파일
<bean id="" class=""/>  
이것을 대신하는 클래스에 
이것은 환경설정 파일(클래스입니다.) 라는 표시로
@Configuration을 붙입니다.

@Bean
public Member kim(){
	return new Member();
}

@Aspect
@PointCut
@Before
@AfterReturning
@AfterThrowing
@After

@EnableSecurity

@EnableSchedule
@Schedule
